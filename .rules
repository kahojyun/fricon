# Fricon project overview

This project is in pre-alpha stage. Breaking changes are expected.

## Code Guidelines

### General Principles

- Prioritize code correctness and clarity. Speed and efficiency are secondary priorities unless otherwise specified.
- Do not write organizational or comments that summarize the code. Comments should only be written in order to explain "why" the code is written in some way in the case there is a reason that is tricky / non-obvious.
- Use proper error handling throughout
- KISS

### Rust

- Never create files with `mod.rs` paths - prefer `src/some_module.rs` instead of `src/some_module/mod.rs`.
- Prefer inlined format args like `format!("{var}")`
- Prefer stabilized `async fn` in traits.
- Prefer implementing functionality in existing files unless it is a new logical component. Avoid creating many small files.
- Avoid using functions that panic like `unwrap()`, instead use mechanisms like `?` to propagate errors.

### Tauri

- Define tauri commands in `src/commands.rs`

### Vue3

- Use Composition API and Typescript with `<script setup lang="ts">` syntax
- Use Pinia for state management
- Follow Vue's single-file component best practices
- Use tailwindcss for styling

## Tooling

`cargo`, `uv` and `pnpm` are used for project management and dependency resolution.

## Project Architecture Overview

Relative to the project root:

- `/crates/`: Contains core project components
    - `/crates/fricon/`: Core Rust functionality
    - `/crates/fricon-py/`: PyO3 bindings
    - `/crates/fricon-ui/`: Tauri application
        - `/crates/fricon-ui/frontend/`: Vue3 application
- `/scripts/`: Project helper scripts
- `/examples/`: Example python scripts
- `/docs/`: Python API documentation
- `/tests/`: Python test suite
