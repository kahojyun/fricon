{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Fricon","text":"<p>Python client for the fridge control system.</p>"},{"location":"#current-features","title":"Current features","text":"<ul> <li>Data storage.</li> </ul>"},{"location":"#usage","title":"Usage","text":"<p>Install via PyPI:</p> <pre><code>pip install fricon\n</code></pre> <p>Initialize workspace via CLI:</p> <pre><code>fricon init path/to/workspace\n</code></pre> <p>Start the server:</p> <pre><code>fricon serve path/to/workspace\n</code></pre> <p>Create a dataset:</p> examples/simple/create.py<pre><code>from fricon import Trace, Workspace\n\nws = Workspace.connect(\"path/to/workspace\")\nmanager = ws.dataset_manager\nwith manager.create(\"example_dataset\") as writer:\n    writer.write(\n        i=1,\n        a=\"Alice\",\n        b=[1, 2],\n        c=[\"A\", \"B\"],\n        d=Trace.fixed_step(0.1, 1.1, [1, 2, 3]),\n    )\nprint(f\"Id of the dataset: {writer.id}\")\n</code></pre> <p>Query and open a dataset:</p> examples/simple/open.py<pre><code>from fricon import Workspace\n\nws = Workspace.connect(\"path/to/workspace\")\nmanager = ws.dataset_manager\ndf_index = manager.list_all()  # Returns a pandas DataFrame\nid_ = df_index.loc[0, \"id\"]  # Records are in descending order of creation\nassert isinstance(id_, int)\ndataset = manager.open(id_)\nprint(dataset.id)\npl_dset = dataset.to_polars()\n</code></pre>"},{"location":"api/","title":"API index","text":"<p>Fricon client library.</p> <p>Classes:</p> Name Description <code>Dataset</code> <p>A dataset.</p> <code>DatasetManager</code> <p>Manager of datasets in workspace.</p> <code>DatasetWriter</code> <p>Writer for newly created dataset.</p> <code>Trace</code> <p>1-D list of values with optional x-axis values.</p> <code>Workspace</code> <p>A client of fricon workspace server.</p> <p>Functions:</p> Name Description <code>arrow_to_numpy</code> <p>Convert Arrow array to numpy array.</p> <code>complex128</code> <p>Get a pyarrow data type representing 128 bit compelex number.</p> <code>trace_</code> <p>Get a pyarrow data type representing <code>Trace</code>.</p>"},{"location":"api/#fricon.Dataset","title":"<code>Dataset</code>","text":"<p>A dataset.</p> <p>Datasets can be created and opened using the <code>DatasetManager</code>.</p> <p>Methods:</p> Name Description <code>to_arrow</code> <p>Load the dataset as an Arrow Table.</p> <code>to_polars</code> <p>Load the dataset as a polars DataFrame.</p> <p>Attributes:</p> Name Type Description <code>created_at</code> <code>datetime</code> <p>Creation date of the dataset.</p> <code>description</code> <code>str</code> <p>Description of the dataset.</p> <code>favorite</code> <code>bool</code> <p>Favorite status of the dataset.</p> <code>id</code> <code>int</code> <p>Id of the dataset.</p> <code>index</code> <code>list[str]</code> <p>Index columns of the dataset.</p> <code>name</code> <code>str</code> <p>Name of the dataset.</p> <code>path</code> <code>str</code> <p>Path of the dataset.</p> <code>tags</code> <code>list[str]</code> <p>Tags of the dataset.</p> <code>uid</code> <code>str</code> <p>UUID of the dataset.</p>"},{"location":"api/#fricon.Dataset.created_at","title":"<code>created_at: datetime = &lt;attribute 'created_at' of 'fricon._core.Dataset' objects&gt;</code>  <code>class</code>","text":"<p>Creation date of the dataset.</p>"},{"location":"api/#fricon.Dataset.description","title":"<code>description: str = &lt;attribute 'description' of 'fricon._core.Dataset' objects&gt;</code>  <code>class</code>","text":"<p>Description of the dataset.</p>"},{"location":"api/#fricon.Dataset.favorite","title":"<code>favorite: bool = &lt;attribute 'favorite' of 'fricon._core.Dataset' objects&gt;</code>  <code>class</code>","text":"<p>Favorite status of the dataset.</p>"},{"location":"api/#fricon.Dataset.id","title":"<code>id: int = &lt;attribute 'id' of 'fricon._core.Dataset' objects&gt;</code>  <code>class</code>","text":"<p>Id of the dataset.</p>"},{"location":"api/#fricon.Dataset.index","title":"<code>index: list[str] = &lt;attribute 'index' of 'fricon._core.Dataset' objects&gt;</code>  <code>class</code>","text":"<p>Index columns of the dataset.</p>"},{"location":"api/#fricon.Dataset.name","title":"<code>name: str = &lt;attribute 'name' of 'fricon._core.Dataset' objects&gt;</code>  <code>class</code>","text":"<p>Name of the dataset.</p>"},{"location":"api/#fricon.Dataset.path","title":"<code>path: str = &lt;attribute 'path' of 'fricon._core.Dataset' objects&gt;</code>  <code>class</code>","text":"<p>Path of the dataset.</p>"},{"location":"api/#fricon.Dataset.tags","title":"<code>tags: list[str] = &lt;attribute 'tags' of 'fricon._core.Dataset' objects&gt;</code>  <code>class</code>","text":"<p>Tags of the dataset.</p>"},{"location":"api/#fricon.Dataset.uid","title":"<code>uid: str = &lt;attribute 'uid' of 'fricon._core.Dataset' objects&gt;</code>  <code>class</code>","text":"<p>UUID of the dataset.</p>"},{"location":"api/#fricon.Dataset.to_arrow","title":"<code>to_arrow()</code>  <code>method descriptor</code>","text":"<p>Load the dataset as an Arrow Table.</p> <p>Returns:</p> Type Description <code>Table</code> <p>An Arrow Table.</p>"},{"location":"api/#fricon.Dataset.to_polars","title":"<code>to_polars()</code>  <code>method descriptor</code>","text":"<p>Load the dataset as a polars DataFrame.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>A polars DataFrame.</p>"},{"location":"api/#fricon.DatasetManager","title":"<code>DatasetManager</code>","text":"<p>Manager of datasets in workspace.</p> <p>Methods:</p> Name Description <code>create</code> <p>Create a new dataset.</p> <code>list_all</code> <p>List all datasets in the workspace.</p> <code>open</code> <p>Open a dataset by id.</p>"},{"location":"api/#fricon.DatasetManager.create","title":"<code>create(name, *, description=None, tags=None, schema=None, index=None)</code>  <code>method descriptor</code>","text":"<p>Create a new dataset.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the dataset.</p> required <code>description</code> <code>str | None</code> <p>Description of the dataset.</p> <code>None</code> <code>tags</code> <code>Iterable[str] | None</code> <p>Tags of the dataset. Duplicate tags will be add only once.</p> <code>None</code> <code>schema</code> <code>Schema | None</code> <p>Schema of the underlying arrow table. Can be only a subset of all columns, other fields will be inferred from first row.</p> <code>None</code> <code>index</code> <code>Sequence[str] | None</code> <p>Names of index columns.</p> <code>None</code> <p>Returns:</p> Type Description <code>DatasetWriter</code> <p>A writer of the newly created dataset.</p>"},{"location":"api/#fricon.DatasetManager.list_all","title":"<code>list_all()</code>  <code>method descriptor</code>","text":"<p>List all datasets in the workspace.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>A pandas dataframe containing information of all datasets.</p>"},{"location":"api/#fricon.DatasetManager.open","title":"<code>open(dataset_id)</code>  <code>method descriptor</code>","text":"<p>Open a dataset by id.</p> <p>Parameters:</p> Name Type Description Default <code>dataset_id</code> <code>str | int</code> <p>An integer <code>id</code> or UUID <code>uid</code></p> required <p>Returns:</p> Type Description <code>Dataset</code> <p>The requested dataset.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>Dataset not found.</p>"},{"location":"api/#fricon.DatasetWriter","title":"<code>DatasetWriter</code>","text":"<p>Writer for newly created dataset.</p> <p>Writers are constructed by calling <code>DatasetManager.create</code>.</p> <p>Methods:</p> Name Description <code>close</code> <p>Finish writing to dataset.</p> <code>write</code> <p>Write a row of values to the dataset.</p> <code>write_dict</code> <p>Write a row of values to the dataset.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Id of the dataset.</p>"},{"location":"api/#fricon.DatasetWriter.id","title":"<code>id: int = &lt;attribute 'id' of 'fricon._core.DatasetWriter' objects&gt;</code>  <code>class</code>","text":"<p>Id of the dataset.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>Writer is not closed yet.</p>"},{"location":"api/#fricon.DatasetWriter.close","title":"<code>close()</code>  <code>method descriptor</code>","text":"<p>Finish writing to dataset.</p>"},{"location":"api/#fricon.DatasetWriter.write","title":"<code>write(**kwargs)</code>  <code>method descriptor</code>","text":"<p>Write a row of values to the dataset.</p> <p>Parameters:</p> Name Type Description Default <code>kwargs</code> <code>_ColumnType</code> <p>Names and values in the row.</p> required"},{"location":"api/#fricon.DatasetWriter.write_dict","title":"<code>write_dict(values)</code>  <code>method descriptor</code>","text":"<p>Write a row of values to the dataset.</p> <p>Parameters:</p> Name Type Description Default <code>values</code> <code>Mapping[str, _ColumnType]</code> <p>A dictionary of names and values in the row.</p> required"},{"location":"api/#fricon.Trace","title":"<code>Trace</code>","text":"<p>1-D list of values with optional x-axis values.</p> <p>Methods:</p> Name Description <code>fixed_step</code> <p>Create a new trace with fixed x steps.</p> <code>to_arrow_array</code> <p>Convert to an arrow array.</p> <code>variable_step</code> <p>Create a new trace with variable x steps.</p> <p>Attributes:</p> Name Type Description <code>data_type</code> <code>DataType</code> <p>Arrow data type of the trace.</p>"},{"location":"api/#fricon.Trace.data_type","title":"<code>data_type: pa.DataType = &lt;attribute 'data_type' of 'fricon._core.Trace' objects&gt;</code>  <code>class</code>","text":"<p>Arrow data type of the trace.</p>"},{"location":"api/#fricon.Trace.fixed_step","title":"<code>fixed_step(x0, dx, ys)</code>  <code>staticmethod</code>","text":"<p>Create a new trace with fixed x steps.</p> <p>Parameters:</p> Name Type Description Default <code>x0</code> <code>float</code> <p>Starting x-axis value.</p> required <code>dx</code> <code>float</code> <p>Step size of x-axis values.</p> required <code>ys</code> <code>Sequence[_ScalarT_co] | Array[Any]</code> <p>List of y-axis values.</p> required <p>Returns:</p> Type Description <code>Trace</code> <p>A fixed-step trace.</p>"},{"location":"api/#fricon.Trace.to_arrow_array","title":"<code>to_arrow_array()</code>  <code>method descriptor</code>","text":"<p>Convert to an arrow array.</p> <p>Returns:</p> Type Description <code>Array[Any]</code> <p>Arrow array.</p>"},{"location":"api/#fricon.Trace.variable_step","title":"<code>variable_step(xs, ys)</code>  <code>staticmethod</code>","text":"<p>Create a new trace with variable x steps.</p> <p>Parameters:</p> Name Type Description Default <code>xs</code> <code>Sequence[float] | NDArray[float64]</code> <p>List of x-axis values.</p> required <code>ys</code> <code>Sequence[_ScalarT_co] | Array[Any]</code> <p>List of y-axis values.</p> required <p>Returns:</p> Type Description <code>Trace</code> <p>A variable-step trace.</p>"},{"location":"api/#fricon.Workspace","title":"<code>Workspace</code>","text":"<p>A client of fricon workspace server.</p> <p>Methods:</p> Name Description <code>connect</code> <p>Connect to a fricon server.</p> <p>Attributes:</p> Name Type Description <code>dataset_manager</code> <code>DatasetManager</code> <p>A dataset manager for this workspace.</p>"},{"location":"api/#fricon.Workspace.dataset_manager","title":"<code>dataset_manager: DatasetManager = &lt;attribute 'dataset_manager' of 'fricon._core.Workspace' objects&gt;</code>  <code>class</code>","text":"<p>A dataset manager for this workspace.</p>"},{"location":"api/#fricon.Workspace.connect","title":"<code>connect(path)</code>  <code>staticmethod</code>","text":"<p>Connect to a fricon server.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>StrPath</code> <p>The path to the workspace.</p> required <p>Returns:</p> Type Description <code>Workspace</code> <p>A workspace client.</p>"},{"location":"api/#fricon.arrow_to_numpy","title":"<code>arrow_to_numpy(arr)</code>","text":"<p>Convert Arrow array to numpy array.</p> <p>If the Arrow array is of custom <code>complex128</code> type, it will be converted to a numpy array of complex numbers. Otherwise, the Arrow array will be converted with <code>pyarrow.Array.to_numpy</code></p> <p>Parameters:</p> Name Type Description Default <code>arr</code> <code>Array[Any] | ChunkedArray[Any]</code> <p>Arrow array.</p> required <p>Returns:</p> Type Description <code>NDArray[Any]</code> <p>Numpy array.</p> Source code in <code>src/fricon/_helper.py</code> <pre><code>def arrow_to_numpy(arr: pa.Array[Any] | pa.ChunkedArray[Any]) -&gt; npt.NDArray[Any]:\n    \"\"\"Convert Arrow array to numpy array.\n\n    If the Arrow array is of custom `complex128` type, it will be converted to\n    a numpy array of complex numbers. Otherwise, the Arrow array will be\n    converted with [`pyarrow.Array.to_numpy`][]\n\n    Parameters:\n        arr: Arrow array.\n\n    Returns:\n        Numpy array.\n    \"\"\"\n    if isinstance(arr, pa.ChunkedArray):\n        arr = arr.combine_chunks()\n    if arr.type == complex128():\n        if not isinstance(arr, pa.StructArray):\n            msg = \"arr must be a StructArray of complex128 type\"\n            raise AssertionError(msg)\n        re = arr.field(\"real\").to_numpy()\n        im = arr.field(\"imag\").to_numpy()\n        return re + 1j * im\n    return arr.to_numpy()\n</code></pre>"},{"location":"api/#fricon.complex128","title":"<code>complex128()</code>  <code>builtin</code>","text":"<p>Get a pyarrow data type representing 128 bit compelex number.</p> <p>Returns:</p> Type Description <code>DataType</code> <p>A pyarrow data type.</p>"},{"location":"api/#fricon.trace_","title":"<code>trace_(item, fixed_step)</code>  <code>builtin</code>","text":"<p>Get a pyarrow data type representing <code>Trace</code>.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>DataType</code> <p>Data type of the y values.</p> required <code>fixed_step</code> <code>bool</code> <p>Whether the trace has fixed x steps.</p> required <p>Returns:</p> Type Description <code>DataType</code> <p>A pyarrow data type.</p>"},{"location":"concepts/","title":"Concepts","text":""},{"location":"concepts/#workspace","title":"Workspace","text":"<p>Fricon stores data in a workspace. A workspace is a directory that contains all the data files and metadata. You can create a workspace using the CLI:</p> <pre><code>fricon init path/to/workspace\n</code></pre> <p>Currently a workspace contains the following files:</p> <pre><code>\ud83d\udcc1 workspace/\n\u251c\u2500\u2500 \ud83d\udcc4 .fricon_version\n\u251c\u2500\u2500 \ud83d\udcc4 fricon.sqlite3\n\u251c\u2500\u2500 \ud83d\udcc1 data/\n\u2502   \u2514\u2500\u2500 \ud83d\udcc1 &lt;date&gt;/\n\u2502       \u2514\u2500\u2500 \ud83d\udcc1 &lt;uuid&gt;/\n\u2502           \u2514\u2500\u2500 \ud83d\udcc4 dataset.arrow\n\u251c\u2500\u2500 \ud83d\udcc1 backup/\n\u2514\u2500\u2500 \ud83d\udcc1 log/\n</code></pre>"},{"location":"concepts/#fricon-server","title":"Fricon Server","text":"<p>Fricon needs a server process to manage the workspace. You can start the server using the CLI:</p> <pre><code>fricon serve path/to/workspace\n</code></pre> <p>The server process will listen to an IPC socket based on the workspace path. The client connects to the server with the workspace path.</p> <pre><code>from fricon import Workspace\n\nws = Workspace.connect(\"path/to/workspace\")\n</code></pre>"},{"location":"concepts/#dataset","title":"Dataset","text":"<p>Fricon allows users to store data in datasets. A dataset stores one and only one data table based on the Arrow format with additional metadata.</p>"},{"location":"concepts/#identifiers","title":"Identifiers","text":"<p>Each dataset will be given two unique identifiers:</p> <ul> <li><code>uid</code>: A UUID that is practically unique across all workspaces. This is useful when users want to export a dataset to other places.</li> <li><code>id</code>: A self-incremental ID that is unique in the current workspace. This is more human-readable and can be used to reference a dataset in a given workspace.</li> </ul> <p>Users can open a dataset by either <code>uid</code> or <code>id</code>.</p>"},{"location":"dataset/","title":"Dataset","text":"<p><code>fricon</code> uses Arrow IPC format to store datasets. A basic knowledge of Arrow data structures can be helpful to understand how <code>fricon</code> works.</p>"},{"location":"dataset/#apache-arrow","title":"Apache Arrow","text":"<p>You may be familiar with pandas, which is a widely-used data manipulation library in Python. Arrow is a similar library but with much stricter data types requirements. Each Arrow table comes with a schema that specifies the data types of each column. Following are some key classes in the python binding of Arrow:</p> <ul> <li><code>pyarrow.RecordBatch</code>: A record batch is a collection of arrays with the same length. Each record batch is associated with a schema.</li> <li><code>pyarrow.Array</code>: An array is a sequence of values with the same data type.</li> <li><code>pyarrow.Scalar</code>: A scalar is a single value with a data type.</li> <li><code>pyarrow.Schema</code>: A schema is a collection of fields. Each field corresponds to a column in a table.</li> <li><code>pyarrow.Field</code>: A field is a data type with a name.</li> <li><code>pyarrow.DataType</code></li> <li><code>pyarrow.Table</code>: A helper type to unify representations of single and collection of record batches with the same schema.</li> </ul>"},{"location":"dataset/#how-are-datasets-stored","title":"How are datasets stored?","text":"<p>A dataset is exactly one Arrow table stored in Arrow IPC format. When a dataset is created, the schema of the table must be determined first. In <code>fricon</code>, users can specify a partial schema in <code>DatasetManager.create</code>, and unspecified columns will be inferred from the first row of the dataset.</p>"},{"location":"dataset/#type-inference","title":"Type inference","text":"<p><code>fricon</code> only tries to infer a subset of Arrow data types. The following table lists the mapping between Python types and Arrow data types:</p> Python type Arrow data type <code>bool</code> <code>pyarrow.bool_</code> <code>int</code> <code>pyarrow.int64</code> <code>float</code> <code>pyarrow.float64</code> <code>complex</code> <code>fricon.complex128</code> <code>str</code> <code>pyarrow.string</code> <code>Sequence</code> <code>pyarrow.list_</code> <code>fricon.Trace</code> <code>fricon.trace_</code> <p>Notice that <code>fricon</code> defines custom data types for complex numbers and traces. Users can use utility functions to convert these custom data types back to Python types, or process them directly with <code>pyarrow</code> or <code>polars</code>.</p> <p>If users want to store other data types, they need to construct <code>pyarrow.Scalar</code> values by themselves. <code>fricon</code> will store these values as is.</p>"}]}