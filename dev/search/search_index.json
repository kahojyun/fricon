{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Fricon","text":"<p>Fricon is a framework for data collection automation.</p>"},{"location":"#current-features","title":"Current features","text":"<ul> <li>Data storage.</li> </ul>"},{"location":"#usage","title":"Usage","text":"<p>Install via PyPI:</p> <pre><code>pip install fricon\n</code></pre> <p>Initialize workspace via CLI:</p> <pre><code>fricon init path/to/workspace\n</code></pre> <p>Start the server:</p> <pre><code>fricon serve path/to/workspace\n</code></pre> <p>Create a dataset:</p> examples/simple/create.py<pre><code>from fricon import Trace, Workspace\n\nws = Workspace.connect(\"path/to/workspace\")\nmanager = ws.dataset_manager\nwith manager.create(\"example_dataset\") as writer:\n    writer.write(\n        i=1,\n        a=42.0,\n        b=[1.0, 2.0],\n        c=[1 + 2j, 3 + 4j],\n        d=Trace.fixed_step(0.1, 1.1, [1, 2, 3]),\n    )\nprint(f\"Id of the dataset: {writer.dataset.id}\")\n</code></pre> <p>Query and open a dataset:</p> examples/simple/open.py<pre><code>from fricon import Workspace\n\nws = Workspace.connect(\"path/to/workspace\")\nmanager = ws.dataset_manager\ndf_index = manager.list_all()  # Returns a pandas DataFrame\nid_ = df_index.loc[0, \"id\"]  # Records are in descending order of creation\nassert isinstance(id_, int)\ndataset = manager.open(id_)\nprint(dataset.id)\npl_dset = dataset.to_polars()\n</code></pre>"},{"location":"api/","title":"API index","text":"<p>Fricon client library.</p> <p>Classes:</p> Name Description <code>Dataset</code> <p>A dataset.</p> <code>DatasetManager</code> <p>Manager of datasets in workspace.</p> <code>DatasetWriter</code> <p>Writer for newly created dataset.</p> <code>Trace</code> <p>1-D list of values with optional x-axis values.</p> <code>Workspace</code> <p>A client of fricon workspace server.</p>"},{"location":"api/#fricon.Dataset","title":"<code>Dataset</code>","text":"<p>A dataset.</p> <p>Datasets can be created and opened using the <code>DatasetManager</code>.</p> <p>Methods:</p> Name Description <code>to_arrow</code> <p>Load the dataset as an Arrow Table.</p> <code>to_polars</code> <p>Load the dataset as a polars LazyFrame.</p> <p>Attributes:</p> Name Type Description <code>created_at</code> <code>datetime</code> <p>Creation date of the dataset.</p> <code>description</code> <code>str</code> <p>Description of the dataset.</p> <code>favorite</code> <code>bool</code> <p>Favorite status of the dataset.</p> <code>id</code> <code>int</code> <p>ID of the dataset.</p> <code>name</code> <code>str</code> <p>Name of the dataset.</p> <code>path</code> <code>str</code> <p>Path of the dataset.</p> <code>status</code> <code>Literal['writing', 'completed', 'aborted']</code> <p>Status of the dataset.</p> <code>tags</code> <code>list[str]</code> <p>Tags of the dataset.</p> <code>uid</code> <code>str</code> <p>UID of the dataset.</p>"},{"location":"api/#fricon.Dataset.created_at","title":"<code>created_at</code>  <code>property</code>","text":"<p>Creation date of the dataset.</p>"},{"location":"api/#fricon.Dataset.description","title":"<code>description</code>  <code>property</code>","text":"<p>Description of the dataset.</p>"},{"location":"api/#fricon.Dataset.favorite","title":"<code>favorite</code>  <code>property</code>","text":"<p>Favorite status of the dataset.</p>"},{"location":"api/#fricon.Dataset.id","title":"<code>id</code>  <code>property</code>","text":"<p>ID of the dataset.</p>"},{"location":"api/#fricon.Dataset.name","title":"<code>name</code>  <code>property</code>","text":"<p>Name of the dataset.</p>"},{"location":"api/#fricon.Dataset.path","title":"<code>path</code>  <code>property</code>","text":"<p>Path of the dataset.</p>"},{"location":"api/#fricon.Dataset.status","title":"<code>status</code>  <code>property</code>","text":"<p>Status of the dataset.</p>"},{"location":"api/#fricon.Dataset.tags","title":"<code>tags</code>  <code>property</code>","text":"<p>Tags of the dataset.</p>"},{"location":"api/#fricon.Dataset.uid","title":"<code>uid</code>  <code>property</code>","text":"<p>UID of the dataset.</p>"},{"location":"api/#fricon.Dataset.to_arrow","title":"<code>to_arrow()</code>  <code>method descriptor</code>","text":"<p>Load the dataset as an Arrow Table.</p> <p>Returns:</p> Type Description <code>Table</code> <p>An Arrow Table.</p>"},{"location":"api/#fricon.Dataset.to_polars","title":"<code>to_polars()</code>  <code>method descriptor</code>","text":"<p>Load the dataset as a polars LazyFrame.</p> <p>Returns:</p> Type Description <code>LazyFrame</code> <p>A polars LazyFrame.</p>"},{"location":"api/#fricon.DatasetManager","title":"<code>DatasetManager</code>","text":"<p>Manager of datasets in workspace.</p> <p>Methods:</p> Name Description <code>create</code> <p>Create a new dataset.</p> <code>list_all</code> <p>List all datasets in the workspace.</p> <code>open</code> <p>Open a dataset by id.</p>"},{"location":"api/#fricon.DatasetManager.create","title":"<code>create(name, *, description=None, tags=None)</code>  <code>method descriptor</code>","text":"<p>Create a new dataset.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the dataset.</p> required <code>description</code> <code>str | None</code> <p>Description of the dataset.</p> <code>None</code> <code>tags</code> <code>Iterable[str] | None</code> <p>Tags of the dataset. Duplicate tags will be added only once.</p> <code>None</code> <p>Returns:</p> Type Description <code>DatasetWriter</code> <p>A writer of the newly created dataset.</p>"},{"location":"api/#fricon.DatasetManager.list_all","title":"<code>list_all()</code>  <code>method descriptor</code>","text":"<p>List all datasets in the workspace.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>A pandas dataframe containing information of all datasets.</p>"},{"location":"api/#fricon.DatasetManager.open","title":"<code>open(dataset_id)</code>  <code>method descriptor</code>","text":"<p>Open a dataset by id.</p> <p>Parameters:</p> Name Type Description Default <code>dataset_id</code> <code>str | int</code> <p>An integer <code>id</code> or UUID <code>uid</code></p> required <p>Returns:</p> Type Description <code>Dataset</code> <p>The requested dataset.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>Dataset not found.</p>"},{"location":"api/#fricon.DatasetWriter","title":"<code>DatasetWriter</code>","text":"<p>Writer for newly created dataset.</p> <p>Writers are constructed by calling <code>DatasetManager.create</code>.</p> <p>Methods:</p> Name Description <code>close</code> <p>Finish writing to dataset.</p> <code>write</code> <p>Write a row of values to the dataset.</p> <code>write_dict</code> <p>Write a row of values to the dataset.</p> <p>Attributes:</p> Name Type Description <code>dataset</code> <code>Dataset</code> <p>ID of the dataset.</p>"},{"location":"api/#fricon.DatasetWriter.dataset","title":"<code>dataset</code>  <code>property</code>","text":"<p>ID of the dataset.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>Writer is not closed yet.</p>"},{"location":"api/#fricon.DatasetWriter.close","title":"<code>close()</code>  <code>method descriptor</code>","text":"<p>Finish writing to dataset.</p>"},{"location":"api/#fricon.DatasetWriter.write","title":"<code>write(**kwargs)</code>  <code>method descriptor</code>","text":"<p>Write a row of values to the dataset.</p> <p>Parameters:</p> Name Type Description Default <code>kwargs</code> <code>_ColumnType</code> <p>Names and values in the row.</p> required"},{"location":"api/#fricon.DatasetWriter.write_dict","title":"<code>write_dict(values)</code>  <code>method descriptor</code>","text":"<p>Write a row of values to the dataset.</p> <p>Parameters:</p> Name Type Description Default <code>values</code> <code>Mapping[str, _ColumnType]</code> <p>A dictionary of names and values in the row.</p> required"},{"location":"api/#fricon.Trace","title":"<code>Trace</code>","text":"<p>1-D list of values with optional x-axis values.</p> <p>Methods:</p> Name Description <code>fixed_step</code> <p>Create a new trace with fixed x steps.</p> <code>variable_step</code> <p>Create a new trace with variable x steps.</p>"},{"location":"api/#fricon.Trace.fixed_step","title":"<code>fixed_step(x0, step, y)</code>  <code>staticmethod</code>","text":"<p>Create a new trace with fixed x steps.</p> <p>Parameters:</p> Name Type Description Default <code>x0</code> <code>float</code> <p>Starting x-axis value.</p> required <code>step</code> <code>float</code> <p>Step size of x-axis values.</p> required <code>y</code> <code>Sequence[_ScalarT_co] | _ArrowAnyArray</code> <p>List of y-axis values.</p> required <p>Returns:</p> Type Description <code>Trace</code> <p>A fixed-step trace.</p>"},{"location":"api/#fricon.Trace.variable_step","title":"<code>variable_step(x, y)</code>  <code>staticmethod</code>","text":"<p>Create a new trace with variable x steps.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Sequence[float] | NDArray[float64]</code> <p>List of x-axis values.</p> required <code>y</code> <code>Sequence[_ScalarT_co] | _ArrowAnyArray</code> <p>List of y-axis values.</p> required <p>Returns:</p> Type Description <code>Trace</code> <p>A variable-step trace.</p>"},{"location":"api/#fricon.Workspace","title":"<code>Workspace</code>","text":"<p>A client of fricon workspace server.</p> <p>Methods:</p> Name Description <code>connect</code> <p>Connect to a fricon server.</p> <p>Attributes:</p> Name Type Description <code>dataset_manager</code> <code>DatasetManager</code> <p>A dataset manager for this workspace.</p>"},{"location":"api/#fricon.Workspace.dataset_manager","title":"<code>dataset_manager</code>  <code>property</code>","text":"<p>A dataset manager for this workspace.</p>"},{"location":"api/#fricon.Workspace.connect","title":"<code>connect(path)</code>  <code>staticmethod</code>","text":"<p>Connect to a fricon server.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>StrPath</code> <p>The path to the workspace.</p> required <p>Returns:</p> Type Description <code>Workspace</code> <p>A workspace client.</p>"},{"location":"concepts/","title":"Concepts","text":""},{"location":"concepts/#workspace","title":"Workspace","text":"<p>Fricon stores data in a workspace. A workspace is a directory that contains all the data files and metadata. You can create a workspace using the CLI:</p> <pre><code>fricon init path/to/workspace\n</code></pre> <p>Currently a workspace contains the following files:</p> <pre><code>\ud83d\udcc1 workspace/\n\u251c\u2500\u2500 \ud83d\udcc4 .fricon_version\n\u251c\u2500\u2500 \ud83d\udcc4 fricon.sqlite3\n\u251c\u2500\u2500 \ud83d\udcc1 data/\n\u2502   \u2514\u2500\u2500 \ud83d\udcc1 &lt;uid[0:2]&gt;/\n\u2502       \u2514\u2500\u2500 \ud83d\udcc1 &lt;uid&gt;/\n\u2502           \u251c\u2500\u2500 \ud83d\udcc4 data_chunk_0.arrow\n\u2502           \u2514\u2500\u2500 \ud83d\udcc4 data_chunk_1.arrow (optional, written when first exceeds chunk size)\n\u251c\u2500\u2500 \ud83d\udcc1 backup/\n\u2514\u2500\u2500 \ud83d\udcc1 log/\n</code></pre>"},{"location":"concepts/#fricon-server","title":"Fricon Server","text":"<p>Fricon needs a server process to manage the workspace. You can start the server using the CLI:</p> <pre><code>fricon serve path/to/workspace\n</code></pre> <p>The server process will listen to an IPC socket based on the workspace path. The client connects to the server with the workspace path.</p> <pre><code>from fricon import Workspace\n\nws = Workspace.connect(\"path/to/workspace\")\n</code></pre>"},{"location":"concepts/#dataset","title":"Dataset","text":"<p>Fricon allows users to store data in datasets. A dataset stores one and only one data table based on the Arrow format with additional metadata.</p>"},{"location":"concepts/#identifiers","title":"Identifiers","text":"<p>Each dataset will be given two unique identifiers:</p> <ul> <li><code>uid</code>: A UUID that is practically unique across all workspaces. This is   useful when users want to export a dataset to other places.</li> <li><code>id</code>: A self-incremental ID that is unique in the current workspace. This is   more human-readable and can be used to reference a dataset in a given   workspace.</li> </ul> <p>Users can open a dataset by either <code>uid</code> or <code>id</code>.</p>"},{"location":"dataset/","title":"Dataset","text":"<p><code>fricon</code> uses Arrow IPC format to store datasets. A basic knowledge of Arrow data structures can be helpful to understand how <code>fricon</code> works.</p>"},{"location":"dataset/#apache-arrow","title":"Apache Arrow","text":"<p>You may be familiar with pandas, which is a widely-used data manipulation library in Python. Arrow is a similar library but with much stricter data types requirements. Each Arrow table comes with a schema that specifies the data types of each column. Following are some key classes in the python binding of Arrow:</p> <ul> <li><code>pyarrow.RecordBatch</code>: A record batch is a collection of arrays with the   same length. Each record batch is associated with a schema.</li> <li><code>pyarrow.Array</code>: An array is a sequence of values with the same data   type.</li> <li><code>pyarrow.Scalar</code>: A scalar is a single value with a data type.</li> <li><code>pyarrow.Schema</code>: A schema is a collection of fields. Each field   corresponds to a column in a table.</li> <li><code>pyarrow.Field</code>: A field is a data type with a name.</li> <li><code>pyarrow.DataType</code></li> <li><code>pyarrow.Table</code>: A helper type to unify representations of single and   collection of record batches with the same schema.</li> </ul>"},{"location":"dataset/#how-are-datasets-stored","title":"How are datasets stored?","text":"<p>A dataset is exactly one Arrow table stored in Arrow IPC format. When a dataset is created, the schema of the table is automatically inferred from the first row of data written. This allows for flexible data collection without requiring manual schema definition.</p>"},{"location":"dataset/#type-inference","title":"Type inference","text":"<p><code>fricon</code> MVP currently supports a focused set of data types optimized for scientific measurements and signal processing. The following table lists the supported types:</p> Python type Dataset data type Description <code>float</code> <code>Float64</code> 64-bit floating point numbers <code>complex</code> <code>Complex128</code> 128-bit complex numbers (real + imaginary) <code>fricon.Trace</code> <code>Trace</code> Time series data with various x-axis formats <p>Note: The MVP version intentionally limits type support to float and complex types for simplicity. Additional types (bool, int, str) will be supported in future releases.</p>"},{"location":"dataset/#supported-trace-variants","title":"Supported trace variants","text":"<p>Trace data supports three different formats depending on how the x-axis (independent variable) is stored:</p> <ul> <li>SimpleList: Only y-values are stored, x-values are implicit indices (0, 1, 2, ...)</li> <li>FixedStep: Regular spacing with x\u2080 (starting point) and step size</li> <li>VariableStep: Arbitrary x-values stored alongside y-values</li> </ul>"},{"location":"dataset/#future-extensions","title":"Future extensions","text":"<p>Additional data types (bool, int, str, timestamps) will be supported in future versions. The current focus on float, complex, and trace types ensures optimal performance and correctness for the most common scientific use cases.</p>"}]}